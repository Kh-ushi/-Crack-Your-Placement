// 15. 3Sum

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

        Arrays.sort(nums);

        List<List<Integer>> triplets = new ArrayList<List<Integer>>();

        for (int i = 0; i < nums.length - 2; i++) {

            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }

            int j = i + 1;
            int k = nums.length - 1;

           

            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum==0){
                    triplets.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    while(j<k && nums[j]==nums[j+1]){
                        j++;
                    }
                    while(j<k && nums[k]==nums[k-1]){
                        k--;
                    }
                    j++;
                    k--;
                }

                else if(sum<0){
                    j++;
                }
                else{
                    k--;
                }

            }

        }

        return triplets;

    }
}

// 18. 4Sum

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 0; i < nums.length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            for (int j = i + 1; j < nums.length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }

                int k = j + 1;
                int l = nums.length - 1;

                while (k < l) {
                    long sum = (long) nums[i] + (long) nums[j] + (long) nums[k] + (long) nums[l];

                    if (sum == target) {
                        ans.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        while (k < l && nums[k] == nums[k + 1]) {
                            k++;
                        }
                        while (k < l && nums[l] == nums[l - 1]) {
                            l--;
                        }
                        k++;
                        l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return ans;
    }
}



// 1423. Maximum Points You Can Obtain from Cards

class Solution {
    public int maxScore(int[] cardPoints, int k) {

        int sum=0;
        for(int i=0;i<k;i++){
            sum+=cardPoints[i];
        }
        int maxSum=sum;
        int l=k-1;
        int r=cardPoints.length;

        while(l>=0){
         
         sum-=cardPoints[l];
         l--;
         r--;
         sum+=cardPoints[r];

         maxSum=Math.max(maxSum,sum);

        }
        

        return maxSum;
    }
}



// 54. Spiral Matrix

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {

        int startRow=0;
        int endRow=matrix.length-1;
        int startCol=0;
        int endCol=matrix[0].length-1;

        List<Integer>ans=new ArrayList<>();
        
        while(startRow<=endRow && startCol<=endCol){
            
            //TOP
            for(int j=startCol;j<=endCol;j++){
               ans.add(matrix[startRow][j]);
            }

            //RIGHT
            for(int i=startRow+1;i<=endRow;i++){
                ans.add(matrix[i][endCol]);
            }

            //BOTTOM
            for(int j=endCol-1;j>=startCol;j--){
                if(startRow==endRow){
                   break;
                }
                ans.add(matrix[endRow][j]);
            }
            //LEFT

            for(int i=endRow-1;i>=startRow+1;i--){
                if(startCol==endCol){
                    break;
                }
                ans.add(matrix[i][startCol]);
            }

            startCol++;
            startRow++;
            endRow--;
            endCol--;

        }
        
        return ans;
    }
}



// 560. Subarray Sum Equals K

class Solution {
    public int subarraySum(int[] nums, int k) {

        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int sum = 0;
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k)) {
                ans+=map.get(sum-k);
            }

            map.put(sum,map.getOrDefault(sum,0)+1);
        }

        return ans;

    }
}

// 79. Word Search

class Solution {

    int dir[][] = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };

    public boolean solve(char board[][], String word, int idx, boolean vis[][], int row, int col) {

        if(idx==word.length()){
            return true;
        }

        if (row < 0 || row >= board.length || col < 0 || col >= board[0].length || vis[row][col]
                || word.charAt(idx) != board[row][col]) {
            return false;
        }

        vis[row][col] = true;

        for (int i = 0; i < dir.length; i++) {
            if (solve(board, word, idx + 1, vis, row + dir[i][0], col + dir[i][1])) {
                return true;
            }
        }

        vis[row][col] = false;
        return false;

    }

    public boolean exist(char[][] board, String word) {

        boolean vis[][] = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    if (solve(board, word, 0, vis, i, j)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}


// 88. Merge Sorted Array
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int l = 0;
        int r = 0;
        int[] arr = new int[m + n];
        int idx = 0;

        while (l < m && r < n) {
            if (nums1[l] <= nums2[r]) {
                arr[idx] = nums1[l];
                l++;
            } else {
                arr[idx] = nums2[r];
                r++;
            }
            idx++;
        }

       
        while (l < m) {
            arr[idx] = nums1[l];
            l++;
            idx++;
        }

        
        while (r < n) {
            arr[idx] = nums2[r];
            r++;
            idx++;
        }

        
        for (int i = 0; i < arr.length; i++) {
            nums1[i] = arr[i];
        }
    }
}

// 55. Jump Game
class Solution {
    public boolean canJump(int[] nums) {
        
        boolean map[]=new boolean[nums.length];
        map[nums.length-1]=true;

        for(int i=nums.length-2;i>=0;i--){
            for(int j=1;j<=nums[i];j++){
                if(map[i+j]==true){
                    map[i]=true;
                    break;
                }
            }
        }

        return map[0];
    }
}


// 169. Majority Element
class Solution {
    public int majorityElement(int[] nums) {
        
        int cnt=0;
        int el=0;

        for(int i=0;i<nums.length;i++){

            if(cnt==0){
                cnt=1;
                el=nums[i];
            }
            else if(nums[i]==el){
                cnt++;
            }
            else{
                cnt--;
            }
        }


        return el;

    }
}


//493. Reverse Pairs
 

class Solution {

    public int finalAns = 0;
    
    public int count(int num1[], int si1, int ei1, int si2, int ei2) {
        int ans = 0;
        int i = si1;
        int j = si2;
        while (i <= ei1 && j <= ei2) {
            if ((long)num1[i] > 2 * (long)num1[j]) {
                ans += (ei1 - i + 1);
                j++;
            } else {
                i++;
            }
        }
        return ans;
    }

    public void mergeSort(int nums[], int si, int ei) {
        if (si >= ei) {
            return;
        }
        int mid = si + (ei - si) / 2;
        mergeSort(nums, si, mid);
        mergeSort(nums, mid + 1, ei);
        finalAns += count(nums, si, mid, mid + 1, ei);
        merge(nums, si, mid, ei);
    }

    public void merge(int nums[], int si, int mid, int ei) {
        int temp[] = new int[ei - si + 1];
        int i = si;
        int j = mid + 1;
        int k = 0;

        while (i <= mid && j <= ei) {
            if (nums[i] < nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }

        while (i <= mid) {
            temp[k++] = nums[i++];
        }

        while (j <= ei) {
            temp[k++] = nums[j++];
        }

        for (k = 0, i = si; k < temp.length; k++, i++) {
            nums[i] = temp[k];
        }
    }

    public int reversePairs(int[] nums) {
        mergeSort(nums, 0, nums.length - 1);
        return finalAns;
    }
    }