// 33. Search in Rotated Sorted Array

class Solution {

 public int findMin(int nums[]) {
    int si = 0;
    int ei = nums.length - 1;
    while (si <= ei) {
        int mid = si + (ei - si) / 2;
        if (mid > 0 && nums[mid - 1] > nums[mid]) {
            return mid;
        }
        if (nums[mid] >= nums[si] && nums[mid] > nums[ei]) {
            si = mid + 1;
        } else {
            ei = mid - 1;
        }
    }
    return si;
}

    public int binSearch(int nums[], int si, int ei, int target) {

        while (si <= ei) {
            int mid = si + (ei - si) / 2;

            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]<target){
                si=mid+1;
            }
            else{
                ei=mid-1;
            }
        }
        return -1;

    }


    // 48. Rotate Image
    class Solution {
        public void rotate(int[][] matrix) {
    
        //ROWISE-CHANGING
        int n=matrix.length;
        for(int i=0;i<n/2;i++){
            for(int j=0;j<n;j++){
                int temp=matrix[i][j];
                matrix[i][j]=matrix[n-1-i][j];
                matrix[n-1-i][j]=temp;
            }
        }
    
        //CHANGING DIAGONALLY
        boolean map[][]=new boolean[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i==j){
                    continue;
                }
    
                if(map[i][j]||map[j][i]){
                    continue;
                }
    
                map[i][j]=true;
                int temp=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=temp;
            }
        }
    
            
            
        }
    }


    // 200. Number of Islands
    class Solution {


        public void dfs(char grid[][],int row,int col){
        
            if(row<0||row>=grid.length||col<0||col>=grid[0].length){
                return ;
            }
            
            if(grid[row][col]=='1'){
                grid[row][col]='#';
                
                dfs(grid,row+1,col);
                dfs(grid,row,col+1);
                dfs(grid,row-1,col);
                dfs(grid,row,col-1);
            }
        
        }
        
        
        
            public int numIslands(char[][] grid) {
                int count=0;
             for(int i=0;i<grid.length;i++){
                for(int j=0;j<grid[0].length;j++){
        
                    if(grid[i][j]=='1'){
                        dfs(grid,i,j);
                        count++;
                    }
                }
             }
        
             return count;
        
            }
        }


    //   51. N-Queens
        class Solution {
            public List<List<String>> solveNQueens(int n) {
                List<List<String>> result = new ArrayList<>();
                char[][] board = new char[n][n];
        
                
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < n; j++) {
                        board[i][j] = '.';
                    }
                }
        
                solve(result, board, 0, n);
                return result;
            }
        
            private void solve(List<List<String>> result, char[][] board, int row, int n) {
                if (row == n) {
                    result.add(construct(board));
                    return;
                }
        
                for (int col = 0; col < n; col++) {
                    if (isValid(board, row, col, n)) {
                        board[row][col] = 'Q';
                        solve(result, board, row + 1, n);
                        board[row][col] = '.';
                    }
                }
            }
        
            private boolean isValid(char[][] board, int row, int col, int n) {
                
                for (int i = 0; i < row; i++) {
                    if (board[i][col] == 'Q') {
                        return false;
                    }
                }
        
               
                for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
                    if (board[i][j] == 'Q') {
                        return false;
                    }
                }
        
               
                for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
                    if (board[i][j] == 'Q') {
                        return false;
                    }
                }
        
                return true;
            }
        
            private List<String> construct(char[][] board) {
                List<String> path = new ArrayList<>();
                for (int i = 0; i < board.length; i++) {
                    path.add(new String(board[i]));
                }
                return path;
            }
        }

        // 40. Combination Sum II
        import java.util.*;

class Solution {
    List<List<Integer>> sol = new ArrayList<>();

    public void solve(int[] candidates, int target, List<Integer> list, int sum, int start) {
        if (sum == target) {
            sol.add(new ArrayList<>(list));
            return;
        }

        if (sum > target) {
            return;
        }

        for (int i = start; i < candidates.length; i++) {
            // Skip duplicates
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }

            list.add(candidates[i]);
            solve(candidates, target, list, sum + candidates[i], i + 1);
            list.remove(list.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        solve(candidates, target, new ArrayList<>(), 0, 0);
        return sol;
    }
}


// 47. Permutations II
class Solution {
    List<List<Integer>> sol = new ArrayList<List<Integer>>();
 
    public void solve(int nums[], List<Integer> list, HashSet<Integer> set, boolean[] used) {
       if (list.size() == nums.length) {
          sol.add(new ArrayList<>(list));
          return;
       }
 
       for (int i = 0; i < nums.length; i++) {
          // Skip duplicates
          if (i > 0 && nums[i] == nums[i - 1] && used[i - 1]) {
             continue;
          }
          if (set.contains(i)) {
             continue;
          }
 
          set.add(i);
          list.add(nums[i]);
          used[i] = true;
          solve(nums, list, set, used);
          used[i] = false;
          list.remove(list.size() - 1);
          set.remove(i);
       }
    }
 
    public List<List<Integer>> permuteUnique(int[] nums) {
       Arrays.sort(nums);
       HashSet<Integer> set = new HashSet<>();
       boolean[] used = new boolean[nums.length];
       solve(nums, new ArrayList<>(), set, used);
       return sol;
    }
 }
 
