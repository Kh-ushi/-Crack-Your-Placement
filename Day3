// All Unique Permutations of an array


class Solution {
    
    static ArrayList<ArrayList<Integer>> ans;

    static void solve(ArrayList<Integer> arr, int n, ArrayList<Integer> list, boolean[] vis) {
        
        if (n == 0) {
            ans.add(new ArrayList<>(list));
            return;
        }
        
        for (int i = 0; i < arr.size(); i++) {
            
            if (i > 0 && arr.get(i) == arr.get(i - 1) && vis[i - 1]) {
                continue;
            }
            
            if(vis[i]){
                continue;
            }
            
            
            list.add(arr.get(i));
            vis[i] = true;
            solve(arr, n - 1, list, vis); 
            list.remove(list.size() - 1); 
            vis[i] = false;
        }
    }
    
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr, int n) {
        
        ans = new ArrayList<>();
        Collections.sort(arr);
        
        solve(arr, n, new ArrayList<>(), new boolean[arr.size()]);
        
        return ans;
    }
}




// 289. Game of Life


// 2-earlier 1 now 0
// 3-earlier 0 now 1
class Solution {

    int dir[][]={{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}}; 
 
   public int countLives(int board[][],int row,int col){
     int count=0;
     for(int i=0;i<dir.length;i++){
         int newRow=row+dir[i][0];
         int newCol=col+dir[i][1];
         if(newRow<0||newRow>=board.length||newCol<0||newCol>=board[0].length){
             continue;
         }
         if(board[newRow][newCol]==2||board[newRow][newCol]==1){
            count++;
         }
     }
 
     return count;
   }
 
     public void gameOfLife(int[][] board) {
 
         for (int i = 0; i < board.length; i++) {
             for (int j = 0; j < board[0].length; j++) {
 
                 int count = countLives(board, i, j);
 
                 if (board[i][j] == 1) {
                     if (count < 2 || count > 3) {
                         board[i][j] = 2;
                     }
                 } else if (board[i][j] == 0) {
                     if (count == 3) {
                         board[i][j] = 3;
                     }
                 }
 
             }
         }
 
 
         for(int i=0;i<board.length;i++){
             for(int j=0;j<board[0].length;j++){
                 if(board[i][j]==2){
                     board[i][j]=0;
                 }
 
                 if(board[i][j]==3){
                     board[i][j]=1;
                 }
             }
         }
 
     }
 }