// 322. Coin Change


class Solution {
    public int coinChange(int[] coins, int amount) {
        int dp[][] = new int[coins.length + 1][amount + 1];

        for (int j = 1; j <= amount; j++) {
            dp[0][j] = Integer.MAX_VALUE;
        }
     

      
        for (int i = 1; i <= coins.length; i++) {
            for (int j = 1; j <= amount; j++) {
                int val = coins[i - 1];
                if (val <= j) {
                    if (dp[i][j - val] != Integer.MAX_VALUE) {
                        dp[i][j] = Math.min(1 + dp[i][j - val], dp[i - 1][j]);
                    } else {
                        dp[i][j] = dp[i - 1][j];
                    }
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[coins.length][amount] == Integer.MAX_VALUE ? -1 : dp[coins.length][amount];
    }
}

// 42. Trapping Rain Water

class Solution {
    public int trap(int[] height) {

        int leftmax[]=new int[height.length];
        int rightmax[]=new int[height.length];

        //LEFT MAX
        leftmax[0]=height[0];
        for(int i=1;i<height.length;i++){
            leftmax[i]=Math.max(leftmax[i-1],height[i]);
        }

        //RIGHT MAX
        rightmax[height.length-1]=height[height.length-1];
        for(int i=height.length-2;i>=0;i--){
            rightmax[i]=Math.max(rightmax[i+1],height[i]);
        }

        //CALCULATING TRAPPED WATER
        int trappedwater=0;

        for(int i=0;i<height.length;i++){

            trappedwater+=Math.min(leftmax[i],rightmax[i])-height[i];
        }
        return trappedwater;
        
    }
}


// 300. Longest Increasing Subsequence

class Solution {

    public int solve(int nums[], int i, int p, int dp[][]) {
        if (i >= nums.length) {
            return 0;
        }

        if (dp[i][p + 1] != -1) {
            return dp[i][p + 1];
        }

        if (p == -1 || nums[i] > nums[p]) {
            int ans1 = 1 + solve(nums, i + 1, i, dp);
            int ans2 = solve(nums, i + 1, p, dp);
            dp[i][p + 1] = Math.max(ans1, ans2);
        } else {
            dp[i][p + 1] = solve(nums, i + 1, p, dp);
        }

        return dp[i][p + 1];
    }

    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n][n+1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }

        return solve(nums, 0, -1, dp);
    }
}
