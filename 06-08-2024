// 934. Shortest Bridge


class Solution {

    int moves[][] = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

    public void dfs(int grid[][], int row, int col, Queue<int[]> q, boolean vis[][]) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || vis[row][col] || grid[row][col] == 0) {
            return;
        }

        vis[row][col] = true;
        q.add(new int[] { row, col });

        for (int[] move : moves) {
            dfs(grid, row + move[0], col + move[1], q, vis);
        }
    }

    public int shortestBridge(int[][] grid) {
        Queue<int[]> q = new LinkedList<>();
        boolean vis[][] = new boolean[grid.length][grid[0].length];

        // STEP 1: FIND 1ST ISLAND
        int row = 0, col = 0;
        outer: for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    row = i;
                    col = j;
                    break outer;
                }
            }
        }
        dfs(grid, row, col, q, vis);

        // STEP 2: FIND SHORTEST BRIDGE
        
        int count = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            while (size > 0) {
                int[] pos = q.poll();
               
                size--;
                for (int[] move : moves) {
                    int newRow = pos[0] + move[0];
                    int newCol = pos[1] + move[1];
                    if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length
                            && !vis[newRow][newCol]) {
                        if (grid[newRow][newCol] == 1) {
                            return count;
                        }
                        if (grid[newRow][newCol] == 0) {
                            q.add(new int[] { newRow, newCol });
                        }
                        vis[newRow][newCol] = true;
                    }
                }
            }
            count++;
        }

        return -1;
    }
}


// 1319. Number of Operations to Make Network Connected

class Solution {
    public class Edge{
        int src;
        int dest;
        public Edge(int src,int dest){
            this.src=src;
            this.dest=dest;
        }
    }
    public void createGraph(ArrayList<Edge>graph[],int connections[][]){
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<>();
        }

        for(int i=0;i<connections.length;i++){
            int u=connections[i][0];
            int v=connections[i][1];
            graph[u].add(new Edge(u,v));
            graph[v].add(new Edge(v,u));
        }

    }
    public void dfs(ArrayList<Edge>graph[],boolean vis[],int curr){
        vis[curr]=true;
        for(int i=0;i<graph[curr].size();i++){
            Edge e=graph[curr].get(i);
            if(!vis[e.dest]){
                dfs(graph,vis,e.dest);
            }
        }
    }
    public int makeConnected(int n, int[][] connections) {
       
       if(connections.length<n-1){
        return -1;
       }
     

        ArrayList<Edge>graph[]=new ArrayList[n];
        createGraph(graph,connections);

        int count=0;
        boolean vis[]=new boolean[n];
        for(int i=0;i<graph.length;i++){

            if(!vis[i]){
                count++;
                dfs(graph,vis,i);
            }


        }

        return count-1;
        
    }
}


// 1162. As Far from Land as Possible

class Solution {
    int moves[][] = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

    public int maxDistance(int[][] grid) {
        int max = -1;
        boolean vis[][] = new boolean[grid.length][grid[0].length];
        Queue<int[]> q = new LinkedList<>();

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    q.add(new int[] { i, j, 0 });
                    vis[i][j] = true;
                }
            }
        }

        while (!q.isEmpty()) {
            int[] pos = q.poll();

            for (int[] move : moves) {
                int newRow = pos[0] + move[0];
                int newCol = pos[1] + move[1];

                if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length
                        && !vis[newRow][newCol]) {
                    q.add(new int[] { newRow, newCol, pos[2] + 1 });
                    max = Math.max(pos[2] + 1, max);
                    vis[newRow][newCol] = true;
                }
            }
        }

        return max == -1 ? -1 : max;
    }
}
