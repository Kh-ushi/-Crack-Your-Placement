// 474. Ones and Zeroes


class Solution {

    private int[][][] memo;

    private int solve(String[] strs, int idx, int m, int n, int[][] map) {
       
        if (m < 0 || n < 0) {
            return Integer.MIN_VALUE; 
        }
        if (idx == strs.length) {
            return 0;
        }
        if (memo[idx][m][n] != -1) {
            return memo[idx][m][n];
        }
 
        int include = 1 + solve(strs, idx + 1, m - map[idx][0], n - map[idx][1], map);
        
    
        int exclude = solve(strs, idx + 1, m, n, map);
        
        
        memo[idx][m][n] = Math.max(include, exclude);

        return memo[idx][m][n];
    }

    public int findMaxForm(String[] strs, int m, int n) {
        int[][] map = new int[strs.length][2];
        for (int i = 0; i < strs.length; i++) {
            String str = strs[i];
            for (int j = 0; j < str.length(); j++) {
                if (str.charAt(j) == '1') {
                    map[i][1]++;
                } else {
                    map[i][0]++;
                }
            }
        }

        memo = new int[strs.length][m + 1][n + 1];
        for (int[][] matrix : memo) {
            for (int[] row : matrix) {
                Arrays.fill(row, -1);
            }
        }

        return solve(strs, 0, m, n, map);
    }
}


// 64. Minimum Path Sum


class Solution {


    public int minPathSum(int[][] grid) {

 ;

        for(int i=grid.length-1;i>=0;i--){
            for(int j=grid[0].length-1;j>=0;j--){

                if(i==grid.length-1 && j==grid[0].length-1){
                    continue;
                }

                int ans=Integer.MAX_VALUE;
                if((i+1)<grid.length){
                    ans=Math.min(grid[i+1][j],ans);
                }

                if((j+1)<grid[0].length){
                    ans=Math.min(grid[i][j+1],ans);
                }

                grid[i][j]+=ans;
              
            
            }
        }

        return grid[0][0];
        
    }
}

// 718. Maximum Length of Repeated Subarray

class Solution {
    public int findLength(int[] nums1, int[] nums2) {

        int ans = 0;

        int dp[][] = new int[nums1.length + 1][nums2.length + 1];

        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[0].length; j++) {

                if (nums1[i - 1] == nums2[j - 1]) {
                   
                   dp[i][j]=1+dp[i-1][j-1];
                   ans=Math.max(ans,dp[i][j]);

                }

            }
        }


        return ans;

       

    }
}


// 1277. Count Square Submatrices with All Ones

class Solution {
    public int countSquares(int[][] matrix) {
        int ans = 0;

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] > 0 && i > 0 && j > 0) {
                    matrix[i][j] += Math.min(matrix[i - 1][j], 
                                Math.min(matrix[i][j - 1], matrix[i - 1][j - 1]));
                }
                ans += matrix[i][j];
            }
        }

        return ans;
    }
}


// 304. Range Sum Query 2D - Immutable

class NumMatrix {

    private int[][] dp;

    public NumMatrix(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) return;

        int rows = matrix.length;
        int cols = matrix[0].length;
        dp = new int[rows + 1][cols + 1];

        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                dp[i][j] = matrix[i - 1][j - 1] 
                           + dp[i - 1][j] 
                           + dp[i][j - 1] 
                           - dp[i - 1][j - 1];
            }
        }
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        row2++;
        col2++;
        return dp[row2][col2] 
             - dp[row1][col2] 
             - dp[row2][col1] 
             + dp[row1][col1];
    }
}



// 188. Best Time to Buy and Sell Stock IV


class Solution {
    public int solve(int prices[], int idx, int buy, int cap, int dp[][][]) {

        if (cap == 0) {
            return 0;
        }

        if (idx == prices.length) {
            return 0;
        }

        if (dp[idx][buy][cap] != -1) {
            return dp[idx][buy][cap];
        }

        if (buy == 1) {
            int ans1 = -prices[idx] + solve(prices, idx + 1, 0, cap, dp);
            int ans2 = solve(prices, idx + 1, 1, cap, dp);
            dp[idx][buy][cap] = Math.max(ans1, ans2);
        } else {
            int ans1 = prices[idx] + solve(prices, idx + 1, 1, cap - 1, dp);
            int ans2 = solve(prices, idx + 1, 0, cap, dp);
            dp[idx][buy][cap] = Math.max(ans1, ans2);
        }

        return dp[idx][buy][cap];
    }

    public int maxProfit(int k, int[] prices) {

        int dp[][][] = new int[prices.length][2][k+1]; 

        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < 2; j++) {
                for (int l = 0;  l< k+1; l++) { 
                    dp[i][j][l] = -1;
                }
            }
        }

        return solve(prices, 0, 1, k, dp);
        
    }
}

