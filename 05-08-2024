// Strongly Connected Components (Kosaraju's Algo)
class Solution {

    private void topSort(ArrayList<ArrayList<Integer>> adj, boolean[] vis, int src, Stack<Integer> s) {
        vis[src] = true;
        for (int i = 0; i < adj.get(src).size(); i++) {
            int edge = adj.get(src).get(i);
            if (!vis[edge]) {
                topSort(adj, vis, edge, s);
            }
        }
        s.push(src);
    }

    private void dfs(ArrayList<ArrayList<Integer>> newAdj, int curr, boolean[] vis) {
        vis[curr] = true;
        for (int i = 0; i < newAdj.get(curr).size(); i++) {
            int edge = newAdj.get(curr).get(i);
            if (!vis[edge]) {
                dfs(newAdj, edge, vis);
            }
        }
    }

    // Function to find the number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis = new boolean[V];
        Stack<Integer> s = new Stack<>();

      
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                topSort(adj, vis, i, s);
            }
        }

        
        ArrayList<ArrayList<Integer>> newAdj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            newAdj.add(new ArrayList<>());
        }

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < adj.get(i).size(); j++) {
                int u = i;
                int v = adj.get(i).get(j);
                newAdj.get(v).add(u);
            }
        }

        
        vis = new boolean[V];
        int count = 0;
        while (!s.isEmpty()) {
            int i = s.pop();
            if (!vis[i]) {
                dfs(newAdj, i, vis);
                count++;
            }
        }

        return count;
    }
}



// Rat in a Maze Problem - I

class Solution {
    
    public static Object moves[][] = {
      {0, 1, 'R'},
      {0, -1, 'L'},
      {1, 0, 'D'},
      {-1, 0, 'U'}
  };
  
  public void solve(int mat[][],boolean vis[][],int row,int col,ArrayList<String>ans,String s){
      
      if(row<0||row>=mat.length||col<0||col>=mat[0].length||vis[row][col]||mat[row][col]==0){
          return;
      }
      
      if(row==mat.length-1 && col==mat[0].length-1){
          ans.add(s);
          return;
      }
      
      
      vis[row][col]=true;
      
      for(Object[] move:moves){
          int x=(Integer)move[0];
          int y=(Integer)move[1];
          char direction = (Character) move[2];
          
          solve(mat,vis,row+x,col+y,ans,s+direction);
          
      }
      
      vis[row][col]=false;
      
      
  } 
  
  public ArrayList<String> findPath(int[][] mat) {
      // Your code here
      
      boolean vis[][]=new boolean[mat.length][mat[0].length];
      ArrayList<String>ans=new ArrayList<>();
      solve(mat,vis,0,0,ans,"");
      return ans;
      
  }
}




// Steps by Knight
class Solution {
    int moves[][] = {
        {2, 1}, {2, -1}, {-2, 1}, {-2, -1},
        {1, 2}, {1, -2}, {-1, 2}, {-1, -2}
    };

    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N) {
        if (KnightPos[0] == TargetPos[0] && KnightPos[1] == TargetPos[1]) {
            return 0;
        }
        
        int dp[][] = new int[N][N];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{KnightPos[0], KnightPos[1]});
        dp[KnightPos[0] - 1][KnightPos[1] - 1] = 0;
        
        while (!q.isEmpty()) {
            int pos[] = q.poll();
            int row = pos[0];
            int col = pos[1];
            
            for (int[] move : moves) {
                int newRow = row + move[0];
                int newCol = col + move[1];
                
                if (newRow >= 1 && newRow <= N && newCol >= 1 && newCol <= N && dp[newRow - 1][newCol - 1] == -1) {
                    dp[newRow - 1][newCol - 1] = 1 + dp[row - 1][col - 1];
                    if (newRow == TargetPos[0] && newCol == TargetPos[1]) {
                        return dp[newRow - 1][newCol - 1];
                    }
                    q.add(new int[]{newRow, newCol});
                }
            }
        }
        
        return -1;
    }
}


// 394. Decode String



class Solution {
    public String decodeString(String s) {
        Stack<Character> track = new Stack<>();
        
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ']') {
                StringBuilder chars = new StringBuilder();
                while (!track.isEmpty() && track.peek() != '[') {
                    chars.insert(0, track.pop());
                }
                track.pop();

                StringBuilder numStr = new StringBuilder();
                while (!track.isEmpty() && Character.isDigit(track.peek())) {
                    numStr.insert(0, track.pop());
                }
                int num = Integer.parseInt(numStr.toString());

                for (int j = 0; j < num; j++) {
                    for (int k = 0; k < chars.length(); k++) {
                        track.push(chars.charAt(k));
                    }
                }
            } else {
                track.push(s.charAt(i));
            }
        }

        StringBuilder ans = new StringBuilder();
        while (!track.isEmpty()) {
            ans.insert(0, track.pop());
        }
        return ans.toString();
    }
}

