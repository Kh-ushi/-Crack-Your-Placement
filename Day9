// 70. Climbing Stairs


class Solution {
    public int climbStairs2(int n,int dp[]) {

        if(n<0){
            return 0;
        }

        if(n==0){
            return 1;
        }

        if(dp[n]!=-1){
            return dp[n];
        }

        dp[n]=climbStairs2(n-1,dp)+climbStairs2(n-2,dp);
        return dp[n];
        
    }

     public int climbStairs(int n){

        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        return climbStairs2(n,dp);

     }
}





// 935. Knight Dialer

class Solution {
    int map[][] = {
        {4, 6},
        {8, 6},
        {7, 9},
        {4, 8},
        {3, 9, 0},
        {},
        {1, 7, 0},
        {2, 6},
        {1, 3},
        {2, 4}
    };
    int MOD = 1000000007;

    public int solve(int n, int cell, int dp[][]) {
        if (n == 1) {
            return 1;
        }
        
        if (dp[n][cell] != -1) {
            return dp[n][cell];
        }

        int ans = 0;
        for (int i = 0; i < map[cell].length; i++) {
            ans = (ans + solve(n - 1, map[cell][i], dp)) % MOD;
        }

        dp[n][cell] = ans;
        return dp[n][cell];
    }

    public int knightDialer(int n) {
        int result = 0;
        int dp[][] = new int[n + 1][10];
        
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                dp[i][j] = -1;
            }
        }

        for (int i = 0; i <= 9; i++) {
            result = (result + solve(n, i, dp)) % MOD;
        }

        return result;
    }
}


// Maximize The Cut Segments

class Solution {
   
    public int solve(int cuts[], int length, int dp[]) {
        if (length == 0) {
            return 0;
        }

        if (dp[length] != -1) {
            return dp[length];
        }

        int maxCuts = Integer.MIN_VALUE; 

        for (int i = 0; i < cuts.length; i++) {
            if (cuts[i] <= length) {
                int result = solve(cuts, length - cuts[i], dp);
                if (result != -1) {
                    maxCuts = Math.max(maxCuts, result + 1);
                }
            }
        }

        dp[length] = (maxCuts == Integer.MIN_VALUE) ? -1 : maxCuts;
        return dp[length];
    }

   
    public int maximizeCuts(int n, int x, int y, int z) {
        int cuts[] = {x, y, z};

        int dp[] = new int[n + 1];
        Arrays.fill(dp, -1);

        int res = solve(cuts, n, dp);

        return res == -1 ? 0 : res;
    }
}



// 338. Counting Bits

class Solution {
    public int[] countBits(int n) {

        int arr[]=new int[n+1];

        for(int i=1;i<arr.length;i++){
            arr[i]=arr[i>>1]+(i&1);
        }

        return arr;
        
    }
}



// 62. Unique Paths

class Solution {
    public int solve(int i,int j,int m,int n,int dp[][]){

    if(i<0||i>=m||j<0||j>=n){
        return 0;
    }   

    if(i==m-1 && j==n-1){
        return 1;
    } 
    
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    
    int ans1=solve(i+1,j,m,n,dp);
    int ans2=solve(i,j+1,m,n,dp);

    dp[i][j]=ans1+ans2;

    return dp[i][j];


    }
    public int uniquePaths(int m, int n) {

        int dp[][]=new int[m][n];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                dp[i][j]=-1;
            }
        }

        return solve(0,0,m,n,dp);
        
    }
}

